{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/5e79c9e0-8a71-414e-8f0a-d638e02af697/findings"
    },
    "help": {
      "href": "https://help.veracode.com/reader/tS9CaFwL4_lbIEWWomsJoA/ovfZGgu96UINQxIuTqRDwg"
    }
  },
  "scan_id": "5e79c9e0-8a71-414e-8f0a-d638e02af697",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 5701 bytes",
  "modules": [
    "JS files within scaninput.zip"
  ],
  "modules_count": 1,
  "findings": [
    {
      "title": "http.ServerResponse.end",
      "issue_id": 1000,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to http.ServerResponse.end() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/vsts/work/1/s/larvitbase-api.js",
          "line": 114,
          "function_name": "!func",
          "qualified_function_name": "!main.Api.!func.!lambda5.!func",
          "function_prototype": "!js_object !func(!js_object, !js_object, !js_object, !js_object, ...)",
          "scope": "^::!main::Api::!func::!lambda5"
        }
      },
      "flaw_match": {
        "procedure_hash": "3947277635",
        "prototype_hash": "873780004",
        "flaw_hash": "804925330",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2999531497",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1
      }
    },
    {
      "title": "http.ServerResponse.end",
      "issue_id": 1001,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through Sent Data",
      "cwe_id": "201",
      "display_text": "\u003cspan\u003e The application calls the http.ServerResponse.end() function, which will result in data being transferred out of the application (via the network or another medium).  In this case, the message being sent contains local file data.  \u003c/span\u003e \u003cspan\u003eEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/vsts/work/1/s/larvitbase-api.js",
          "line": 114,
          "function_name": "!func",
          "qualified_function_name": "!main.Api.!func.!lambda5.!func",
          "function_prototype": "!js_object !func(!js_object, !js_object, !js_object, !js_object, ...)",
          "scope": "^::!main::Api::!func::!lambda5"
        }
      },
      "flaw_match": {
        "procedure_hash": "3947277635",
        "prototype_hash": "873780004",
        "flaw_hash": "804925330",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2999531497",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1
      }
    },
    {
      "title": "http.ServerResponse.end",
      "issue_id": 1002,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through Sent Data",
      "cwe_id": "201",
      "display_text": "\u003cspan\u003e The application calls the http.ServerResponse.end() function, which will result in data being transferred out of the application (via the network or another medium).  In this case, the message being sent contains local file data.  \u003c/span\u003e \u003cspan\u003eEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "home/vsts/work/1/s/larvitbase-api.js",
          "line": 160,
          "function_name": "!func",
          "qualified_function_name": "!main.Api.!func.!lambda5.!func.!lambda6.!func",
          "function_prototype": "!js_object !func(!js_object, !js_object, !js_object, ...)",
          "scope": "^::!main::Api::!func::!lambda5::!func::!lambda6"
        }
      },
      "flaw_match": {
        "procedure_hash": "2248977284",
        "prototype_hash": "3317137432",
        "flaw_hash": "2560374387",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "61553967",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1
      }
    }
  ],
  "pipeline_scan": "20.12.1-0",
  "dev_stage": "DEVELOPMENT"
}